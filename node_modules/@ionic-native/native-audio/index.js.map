{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/native-audio/index.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAE,UAAU,EAAE,MAAM,eAAe;OACnC,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,oBAAoB;AACpD;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AAQH;IAAA;IAyEA,CAAC;IAxEC;;;;;OAKG;IAEH,mCAAa,GAAb,UAAc,EAAU,EAAE,SAAiB,IAAiB,MAAM,CAAC,CAAC,CAAC;IAErE;;;;;;;;OAQG;IAEH,oCAAc,GAAd,UAAe,EAAU,EAAE,SAAiB,EAAE,MAAc,EAAE,MAAc,EAAE,KAAa,IAAiB,MAAM,CAAC,CAAC,CAAC;IAErH;;;;;OAKG;IAKH,0BAAI,GAAJ,UAAK,EAAU,EAAE,gBAA2B,IAAiB,MAAM,CAAC,CAAC,CAAC;IAEtE;;;;OAIG;IAEH,0BAAI,GAAJ,UAAK,EAAU,IAAiB,MAAM,CAAC,CAAC,CAAC;IAEzC;;;;OAIG;IAEH,0BAAI,GAAJ,UAAK,EAAU,IAAiB,MAAM,CAAC,CAAC,CAAC;IAEzC;;;;OAIG;IAEH,4BAAM,GAAN,UAAO,EAAU,IAAiB,MAAM,CAAC,CAAC,CAAC;IAE3C;;;;;OAKG;IAEH,8CAAwB,GAAxB,UAAyB,EAAU,EAAE,MAAc,IAAiB,MAAM,CAAC,CAAC,CAAC;IAExE,sBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,0BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAjEA;QAAC,OAAO,EAAE;;;;oDAAA;IAYV;QAAC,OAAO,EAAE;;;;qDAAA;IASV;QAAC,OAAO,CAAC;YACP,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC;SACd,CAAC;;;;2CAAA;IAQF;QAAC,OAAO,EAAE;;;;2CAAA;IAQV;QAAC,OAAO,EAAE;;;;2CAAA;IAQV;QAAC,OAAO,EAAE;;;;6CAAA;IASV;QAAC,OAAO,EAAE;;;;+DAAA;IAvEZ;QAAC,MAAM,CAAC;YACN,UAAU,EAAE,aAAa;YACzB,MAAM,EAAE,4BAA4B;YACpC,SAAS,EAAE,qBAAqB;YAChC,IAAI,EAAE,8DAA8D;SACrE,CAAC;;mBAAA;IA2EF,kBAAC;AAAD,CAAC,AAzED,IAyEC","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Plugin, Cordova } from '@ionic-native/core';\r\n/**\r\n * @name Native Audio\r\n * @description Native Audio Playback\r\n * @usage\r\n * ```typescript\r\n * import { NativeAudio } from '@ionic-native/native-audio';\r\n *\r\n * constructor(private nativeAudio: NativeAudio) { }\r\n *\r\n * ...\r\n *\r\n * this.nativeAudio.preloadSimple('uniqueId1', 'path/to/file.mp3').then(onSuccess, onError);\r\n * this.nativeAudio.preloadComplex('uniqueId2', 'path/to/file2.mp3', 1, 1, 0).then(onSuccess, onError);\r\n *\r\n * this.nativeAudio.play('uniqueId1').then(onSuccess, onError);\r\n *\r\n * // can optionally pass a callback to be called when the file is done playing\r\n * this.nativeAudio.play('uniqueId1', () => console.log('uniqueId1 is done playing'));\r\n *\r\n * this.nativeAudio.loop('uniqueId2').then(onSuccess, onError);\r\n *\r\n * this.nativeAudio.setVolumeForComplexAsset('uniqueId2', 0.6).then(onSuccess,onError);\r\n *\r\n * this.nativeAudio.stop('uniqueId1').then(onSuccess,onError);\r\n *\r\n * this.nativeAudio.unload('uniqueId1').then(onSuccess,onError);\r\n *\r\n * ```\r\n */\r\n@Plugin({\r\n  pluginName: 'NativeAudio',\r\n  plugin: 'cordova-plugin-nativeaudio',\r\n  pluginRef: 'plugins.NativeAudio',\r\n  repo: 'https://github.com/floatinghotpot/cordova-plugin-nativeaudio'\r\n})\r\n\r\nexport class NativeAudio {\r\n  /**\r\n   * Loads an audio file into memory. Optimized for short clips / single shots (up to five seconds). Cannot be stopped / looped.\r\n   * @param id {string} unique ID for the audio file\r\n   * @param assetPath {string}  the relative path or absolute URL (inluding http://) to the audio asset.\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  preloadSimple(id: string, assetPath: string): Promise<any> {return; }\r\n\r\n  /**\r\n   * Loads an audio file into memory. Optimized for background music / ambient sound. Uses highlevel native APIs with a larger footprint. (iOS: AVAudioPlayer). Can be stopped / looped and used with multiple voices. Can be faded in and out using the delay parameter.\r\n   * @param id {string} unique ID for the audio file\r\n   * @param assetPath {string}  the relative path or absolute URL (inluding http://) to the audio asset.\r\n   * @param volume {number} the volume of the preloaded sound (0.1 to 1.0)\r\n   * @param voices {number} the number of multichannel voices available\r\n   * @param delay {number}\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  preloadComplex(id: string, assetPath: string, volume: number, voices: number, delay: number): Promise<any> {return; }\r\n\r\n  /**\r\n   * Plays an audio asset\r\n   * @param id {string} unique ID for the audio file\r\n   * @param completeCallback {Function} optional. Callback to be invoked when audio is done playing\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova({\r\n    successIndex: 1,\r\n    errorIndex: 2\r\n  })\r\n  play(id: string, completeCallback?: Function): Promise<any> {return; }\r\n\r\n  /**\r\n   * Stops playing an audio\r\n   * @param id {string} unique ID for the audio file\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  stop(id: string): Promise<any> {return; }\r\n\r\n  /**\r\n   * Loops an audio asset infinitely, this only works for complex assets\r\n   * @param id {string} unique ID for the audio file\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  loop(id: string): Promise<any> {return; }\r\n\r\n  /**\r\n   * Unloads an audio file from memory\r\n   * @param id {string} unique ID for the audio file\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  unload(id: string): Promise<any> {return; }\r\n\r\n  /**\r\n   * Changes the volume for preloaded complex assets.\r\n   * @param id {string} unique ID for the audio file\r\n   * @param volume {number} the volume of the audio asset (0.1 to 1.0)\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  setVolumeForComplexAsset(id: string, volume: number): Promise<any> {return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}