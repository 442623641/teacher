{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/screen-orientation/index.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAE,UAAU,EAAE,MAAM,eAAe;OACnC,EAAE,OAAO,EAAE,eAAe,EAAE,MAAM,EAAE,MAAM,oBAAoB;OAC9D,EAAE,UAAU,EAAE,MAAM,iBAAiB;AAI5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAwCG;AASH;IAAA;QAEE;;WAEG;QACH,iBAAY,GAAG;YACb,gBAAgB,EAAE,kBAAkB;YACpC,kBAAkB,EAAE,oBAAoB;YACxC,iBAAiB,EAAE,mBAAmB;YACtC,mBAAmB,EAAE,qBAAqB;YAC1C,QAAQ,EAAE,UAAU;YACpB,SAAS,EAAE,WAAW;YACtB,GAAG,EAAE,KAAK;SACX,CAAC;IAuCJ,CAAC;IArCC;;;OAGG;IAKH,oCAAQ,GAAR,cAA+B,MAAM,CAAC,CAAC,CAAC;IAExC;;;;;OAKG;IAEH,gCAAI,GAAJ,UAAK,WAAmB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEnD;;OAEG;IAEH,kCAAM,GAAN,cAAiB,CAAC;IAQb,4BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,gCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAhCA;QAAC,OAAO,CAAC;YACP,eAAe,EAAE,IAAI;YACrB,KAAK,EAAE,mBAAmB;SAC3B,CAAC;;;;qDAAA;IASF;QAAC,OAAO,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;;;;iDAAA;IAMhC;QAAC,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;mDAAA;IAMxB;QAAC,eAAe;;mDAAA;IAnDlB;QAAC,MAAM,CAAC;YACN,UAAU,EAAE,mBAAmB;YAC/B,MAAM,EAAE,mCAAmC;YAC3C,SAAS,EAAE,oBAAoB;YAC/B,IAAI,EAAE,6DAA6D;YACnE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,iBAAiB,CAAC;SACjD,CAAC;;yBAAA;IAsDF,wBAAC;AAAD,CAAC,AApDD,IAoDC","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, CordovaProperty, Plugin } from '@ionic-native/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\ndeclare var window;\r\n\r\n/**\r\n * @name Screen Orientation\r\n * @description\r\n * Cordova plugin to set/lock the screen orientation in a common way for iOS, Android, WP8 and Blackberry 10.\r\n * This plugin is based on an early version of Screen Orientation API so the api does not currently match the current spec.\r\n *\r\n * Requires Cordova plugin: `cordova-plugin-screen-orientation`. For more info, please see the [Screen Orientation plugin docs](https://github.com/apache/cordova-plugin-screen-orientation).\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { ScreenOrientation } from '@ionic-native/screen-orientation';\r\n *\r\n * constructor(private screenOrientation: ScreenOrientation) { }\r\n *\r\n * ...\r\n *\r\n *\r\n * // get current\r\n * console.log(this.screenOrientation.type); // logs the current orientation, example: 'landscape'\r\n *\r\n * // set to landscape\r\n * this.screenOrientation.lock(this.screenOrientation.ORIENTATIONS.LANDSCAPE);\r\n *\r\n * // allow user rotate\r\n * this.screenOrientation.unlock();\r\n * ```\r\n *\r\n * @advanced\r\n *\r\n * Accepted orientation values:\r\n *\r\n * | Value                         | Description                                                                  |\r\n * |-------------------------------|------------------------------------------------------------------------------|\r\n * | portrait-primary              | The orientation is in the primary portrait mode.                             |\r\n * | portrait-secondary            | The orientation is in the secondary portrait mode.                           |\r\n * | landscape-primary             | The orientation is in the primary landscape mode.                            |\r\n * | landscape-secondary           | The orientation is in the secondary landscape mode.                          |\r\n * | portrait                      | The orientation is either portrait-primary or portrait-secondary (sensor).   |\r\n * | landscape                     | The orientation is either landscape-primary or landscape-secondary (sensor). |\r\n *\r\n */\r\n@Plugin({\r\n  pluginName: 'ScreenOrientation',\r\n  plugin: 'cordova-plugin-screen-orientation',\r\n  pluginRef: 'screen.orientation',\r\n  repo: 'https://github.com/apache/cordova-plugin-screen-orientation',\r\n  platforms: ['Android', 'iOS', 'Windows Phone 8']\r\n})\r\n\r\nexport class ScreenOrientation {\r\n\r\n  /**\r\n   * Convenience enum for possible orientations\r\n   */\r\n  ORIENTATIONS = {\r\n    PORTRAIT_PRIMARY: 'portrait-primary',\r\n    PORTRAIT_SECONDARY: 'portrait-secondary',\r\n    LANDSCAPE_PRIMARY: 'landscape-primary',\r\n    LANDSCAPE_SECONDARY: 'landscape-secondary',\r\n    PORTRAIT: 'portrait',\r\n    LANDSCAPE: 'landscape',\r\n    ANY: 'any'\r\n  };\r\n\r\n  /**\r\n   * Listen to orientation change event\r\n   * @return {Observable<void>}\r\n   */\r\n  @Cordova({\r\n    eventObservable: true,\r\n    event: 'orientationchange'\r\n  })\r\n  onChange(): Observable<void> { return; }\r\n\r\n  /**\r\n   * Lock the orientation to the passed value.\r\n   * See below for accepted values\r\n   * @param orientation {string} The orientation which should be locked. Accepted values see table above.\r\n   * @return {Promise<any>}\r\n   */\r\n  @Cordova({ otherPromise: true })\r\n  lock(orientation: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Unlock and allow all orientations.\r\n   */\r\n  @Cordova({ sync: true })\r\n  unlock(): void { }\r\n\r\n  /**\r\n   * Get the current orientation of the device.\r\n   */\r\n  @CordovaProperty\r\n  type: string;\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}