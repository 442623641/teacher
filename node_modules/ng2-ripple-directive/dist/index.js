"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var htmlElementStringify = require('html-element-stringify');
/**
 * Ripple directive that can be applied to any kind of element.
 *
 * Inspired by https://codepen.io/Craigtut/pen/dIfzv
 */
var RippleDirective = (function () {
    function RippleDirective() {
        this.color = '#fff';
    }
    RippleDirective.prototype.onClick = function (evt) {
        evt.preventDefault();
        var button = evt.currentTarget;
        var div = document.createElement('div');
        var xPos = evt.pageX - button.offsetLeft;
        var yPos = evt.pageY - button.offsetTop;
        div.classList.add('ripple-effect');
        div.style.height = button.clientHeight;
        div.style.width = button.clientHeight;
        div.style.top = (yPos - (button.clientHeight / 2)) + 'px';
        div.style.left = (xPos - (button.clientWidth / 2)) + 'px';
        div.style.background = this.color;
        button.insertAdjacentHTML('beforeend', htmlElementStringify(div));
        window.setTimeout(function () { return button.removeChild(button.querySelector('.ripple-effect')); }, 2000);
    };
    __decorate([
        core_1.Input('ripple'), 
        __metadata('design:type', String)
    ], RippleDirective.prototype, "color", void 0);
    __decorate([
        core_1.HostListener('click', ['$event']), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [MouseEvent]), 
        __metadata('design:returntype', void 0)
    ], RippleDirective.prototype, "onClick", null);
    RippleDirective = __decorate([
        core_1.Directive({
            selector: '[ripple]',
            host: {
                '[class.ripple]': 'true',
                '[style.position]': '"relative"',
                '[style.outline]': '"none"',
            }
        }), 
        __metadata('design:paramtypes', [])
    ], RippleDirective);
    return RippleDirective;
}());
exports.RippleDirective = RippleDirective;
